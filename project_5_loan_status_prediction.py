# -*- coding: utf-8 -*-
"""Project 5 Loan Status Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1JK-__QL2U0zQgW2kfRK3hIveZ_7Jjt
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

dataset=pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')

dataset.head()

#Number of rows and columns
dataset.shape

#Statistical measures
dataset.describe()

#Number of missing value
dataset.isnull().sum()

#Dropping the missing values
dataset=dataset.dropna()

dataset.isnull().sum()

#label encoding 
dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

dataset.head()

#Dependent column values
dataset['Dependents'].value_counts()

# replacing the value of 3+ to 4
dataset=dataset.replace(to_replace='3+',value=4)

dataset

dataset['Dependents'].value_counts()

"""Data Visualization"""

#education and Loan status
sns.countplot(x='Education',hue='Loan_Status',data=dataset)

#marital Status and Loan Status
sns.countplot(x='Married',hue='Loan_Status',data=dataset)

#Gender and Loan Status
sns.countplot(x='Gender',hue='Loan_Status',data=dataset)

#Application income  and Loan Status
sns.barplot(x='Loan_Status',y='ApplicantIncome',data=dataset)

"""Count plot is good for categorical data or label data only not for continous one

"""

#CoapplicantIncome and Loan Status
sns.barplot(x='Loan_Status',y='CoapplicantIncome',data=dataset)

#Credit_History and Loan Status
sns.countplot(x='Credit_History',hue='Loan_Status',data=dataset)

#Property_Area and Loan status
sns.countplot(x='Property_Area',hue='Loan_Status',data=dataset)

#convert categorical columns to numerical values
dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

dataset.head()

#Sepaarating the data and label
X=dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
y=dataset['Loan_Status']

print(X)
print(y)

"""Train Test split

"""

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,stratify=y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the model:

Support vector model

"""

classifier=svm.SVC(kernel='linear')

#training the support vector machine model
classifier.fit(X_train,y_train)

"""Model Evalution"""

#accuracy score for training data
X_train_prediction=classifier.predict(X_train)
Training_accuracy=accuracy_score(X_train_prediction,y_train)

print("Accuracy of X_train ",Training_accuracy)

#accuracy score for test data
X_test_prediction=classifier.predict(X_test)
Test_accuracy=accuracy_score(X_test_prediction,y_test)

print("Accuracy of X_train ",Test_accuracy)

l=['Female','No',0,'Graduate','No',3510,0,76,360,0,'Urban']
if(l[0]=='Male'):
  l[0]=1
else:
  l[0]=0
if(l[1]=='Yes'):
  l[1]=1
else:
  l[1]=0
if(l[3]=='Graduate'):
  l[3]=1
else:
  l[3]=0
if(l[4]=='Yes'):
  l[4]=1
else:
  l[4]=0
if(l[10]=='Urban'):
  l[10]=1
else:
  l[10]=0
print(l)
if(classifier.predict([l])):
  print("Loan Approved")
else:
  print("Loan Not Approved")

